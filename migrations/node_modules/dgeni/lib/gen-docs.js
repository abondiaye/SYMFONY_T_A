#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Dgeni_1 = require("./Dgeni");
var yargs = __importStar(require("yargs"));
var path = require('canonical-path');
var myArgs = yargs.option('l', {
    alias: 'log',
    describe: 'Output log messages for this level and above',
    type: 'string',
    choices: ['error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly']
})
    .usage('Usage: $0 path/to/mainPackage [path/to/other/packages ...] [--log level]')
    .demandCommand(1)
    .argv;
// Extract the paths to the packages from the command line arguments
var packagePaths = myArgs._;
// Require each of these packages and then create a new dgeni using them
var packages = packagePaths.map(function (packagePath) {
    if (packagePath.indexOf('.') === 0) {
        packagePath = path.resolve(packagePath);
    }
    return require(packagePath);
});
var logLevel = myArgs.log || myArgs.l;
if (logLevel) {
    // Add CLI package (to override settings from other packages)
    packages.push(new Dgeni_1.Dgeni.Package('cli-package').config(function (log) {
        // override log settings
        log.level = logLevel;
    }));
}
var dgeni = new Dgeni_1.Dgeni(packages);
// Run the document generation
dgeni.generate().then(function () { return console.log('Finished generating docs'); }, function (err) { return process.exit(1); });
//# sourceMappingURL=gen-docs.js.map